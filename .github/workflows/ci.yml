name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Tests (Ruby ${{ matrix.ruby }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        ruby: ['3.3']
        rails: ['8.0']

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: guildhub_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      RAILS_ENV: test
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/guildhub_test
      REDIS_URL: redis://localhost:6379/1
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Setup database
        run: |
          bin/rails db:create
          bin/rails db:migrate

      - name: Run tests
        run: bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: rspec-results-${{ matrix.ruby }}
          path: tmp/rspec-results.xml

      - name: Generate coverage report
        if: always()
        run: |
          if [ -f coverage/.resultset.json ]; then
            echo "Coverage report generated"
          fi

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/.resultset.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Linting (Rubocop)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Run Rubocop
        run: bundle exec rubocop --format progress --format json --out tmp/rubocop.json

      - name: Upload Rubocop results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: rubocop-results
          path: tmp/rubocop.json

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true

      - name: Run Brakeman
        run: bundle exec brakeman --format json --output tmp/brakeman.json --no-pager

      - name: Upload Brakeman results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: brakeman-results
          path: tmp/brakeman.json

      - name: Run Bundler Audit
        run: |
          bundle exec bundle-audit check --update || true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: All checks passed
        run: echo "âœ… All CI checks passed successfully!"
